{"version":3,"sources":["models/ToDoElement.tsx","api/api.ts","components/Button.tsx","components/Header.tsx","components/Segment.tsx","components/ToDoProvider.tsx","components/ToDoList.tsx","components/ToDoForm.tsx","components/Menu.tsx","components/Message.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["toDoData","Id","Content","Active","Created","Date","Edited","getToDo","id","find","t","postToDo","todo","taskId","Math","max","map","push","oldtodo","indexOf","axios","defaults","baseURL","params","timeZone","StyledButton","styled","Button","props","color","Header","Text","StyledSegment","View","toDoContextDefault","message","setMessage","tasks","setTasks","ToDoContext","createContext","ToDoProvider","children","useState","useEffect","Provider","value","StyledHeader","StyledText","StyledDivider","StyledElement","StyledElementLeft","StyledElementRight","ToDoList","history","useHistory","useContext","handleDelete","splice","deleteToDo","filter","success","header","content","length","task","onPress","toggleActive","title","toLocaleDateString","toLocaleTimeString","StyledLabel","StyledInput","TextInput","ToDoForm","useParams","setTask","Number","placeholder","nativeID","onChangeText","handleInputChange","trim","some","validateContext","get","then","response","data","dateTime","catch","error","console","StyledMenu","StyledLink","Pressable","Menu","ErrorContent","SuccessContent","Message","StyledContainer","StyledContent","App","basename","className","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","AppRegistry","registerComponent","runApplication","rootTag","document","getElementById"],"mappings":"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","file":"static/js/main.60ccab98.chunk.js","sourcesContent":["export interface ToDoElement {\r\n    Id: number,\r\n    Content: string,\r\n    Active: boolean,\r\n    Created: Date,\r\n    Edited: Date\r\n}\r\n\r\nexport const toDoData: ToDoElement[] = [\r\n    {\r\n        Id: 1,\r\n        Content: 'Drink some coffee',\r\n        Active: true,\r\n        Created: new Date(),\r\n        Edited: new Date()\r\n    },\r\n    {\r\n        Id: 2,\r\n        Content: 'Develop a ToDo program',\r\n        Active: true,\r\n        Created: new Date(),\r\n        Edited: new Date()\r\n    }\r\n] \r\n","import axios, { AxiosResponse } from \"axios\";\r\nimport { DateTimeDto } from \"../models/DateTimeDto\";\r\nimport { toDoData, ToDoElement } from \"../models/ToDoElement\"\r\n\r\nexport const getToDoList = () => {\r\n    return (toDoData);\r\n}\r\n\r\nexport const getToDo = (id: Number) => {\r\n    const todo = toDoData.find(t => t.Id === id)\r\n    return (todo);\r\n}\r\n\r\nexport const postToDo = (todo: ToDoElement) => {\r\n    if (todo.Id === 0){\r\n        const taskId = Math.max(...toDoData.map(t => t.Id)) + 1;\r\n        todo.Id = taskId;\r\n        toDoData.push(todo);\r\n    } else {\r\n        const oldtodo = toDoData.find(t => t.Id === todo.Id);\r\n        if (oldtodo){\r\n            toDoData[toDoData.indexOf(oldtodo)] = todo;\r\n        }\r\n    }    \r\n    return todo;\r\n}\r\n\r\nexport const deleteToDo = (id: number) => {\r\n    if (id) {\r\n        const oldtodo = toDoData.find(t => t.Id === id);\r\n        if (oldtodo){\r\n            toDoData.splice(toDoData.indexOf(oldtodo), 1);\r\n        }\r\n    }\r\n}\r\n\r\naxios.defaults.baseURL=\"https://www.timeapi.io/api\";\r\nconst url = '/Time/current/zone';\r\nconst params = {\r\n    params: {timeZone: 'Etc/GMT'}\r\n};\r\nexport const getTime = <DateTimeDto>() => axios.get<DateTimeDto>(url, params)\r\n    .then(<DateTimeDto>(response: AxiosResponse<DateTimeDto>) => {\r\n        return response.data;\r\n    })\r\n","import styled from \"styled-components/native\";\r\n\r\nexport const StyledButton = styled.Button<{color: string}>`\r\n  font-size: 1rem;\r\n  margin: 0 1rem;\r\n  padding: 0.25em 1em;\r\n  border-radius: 3px;\r\n\r\n  color: ${props => props.color };\r\n`;\r\n\r\n","import styled from \"styled-components/native\";\r\n\r\nexport const Header = styled.Text`\r\n@font-face {\r\n    font-family: 'Lato';\r\n    src: url('./../font/Lato-Bold.woff') format('woff'), url('./../font/LAto-Bold.ttf') format('truetype');\r\n} \r\n  margin:1rem 0;\r\n  font-family: 'Lato';\r\n  font-size: 1.5rem;\r\n  text-align: center;\r\n`","import styled from \"styled-components/native\";\r\n\r\n\r\nexport const StyledSegment = styled.View`\r\n    display: flex;\r\n    flex-direction: column;\r\n    background-color: #eee;\r\n    margin: 0.5rem;\r\n    padding: 0.5rem;\r\n`","import React, { createContext, useEffect, useState } from \"react\";\r\nimport { getToDoList } from \"../api/api\";\r\nimport { ActionMessage } from \"../models/ActionMessage\";\r\nimport { ToDoContextType } from \"../models/ToDoContextType\";\r\nimport { ToDoElement } from \"../models/ToDoElement\";\r\n\r\nconst toDoContextDefault: ToDoContextType = {\r\n    message: null,\r\n    setMessage: null,\r\n    tasks: [],\r\n    setTasks: null\r\n}\r\n\r\nexport const ToDoContext = createContext<ToDoContextType>(toDoContextDefault);\r\n\r\ninterface Props {\r\n    children: React.ReactNode;\r\n}\r\n\r\nexport default function ToDoProvider({children}: Props) {\r\n    const [tasks, setTasks] = useState<ToDoElement[]>([]);\r\n    const [message, setMessage] = useState<ActionMessage | null> (null);\r\n\r\n    useEffect(() => {\r\n        setTasks(getToDoList());\r\n    }, [])\r\n\r\n    return (\r\n        <ToDoContext.Provider value={{tasks, setTasks, message, setMessage}}>\r\n            {children}\r\n        </ToDoContext.Provider>\r\n    )\r\n}","import React, { useContext } from \"react\";\r\nimport { useHistory} from \"react-router-dom\";\r\nimport styled from \"styled-components/native\";\r\nimport { deleteToDo, getToDo, postToDo } from \"../api/api\";\r\nimport { StyledButton } from \"./Button\";\r\nimport { Header } from \"./Header\";\r\nimport { StyledSegment } from \"./Segment\";\r\nimport { ToDoContext } from \"./ToDoProvider\";\r\n\r\nconst StyledHeader = styled.Text`\r\n    font-family: 'Lato';\r\n  font-style: bold;\r\n  font-size: 1.2rem;\r\n  text-align: center;\r\n  margin: 1rem 0;\r\n`\r\n\r\nconst StyledText = styled.Text`\r\n    font-style: italic;\r\n`\r\n\r\nconst StyledDivider = styled.View`\r\n    margin: 1rem;\r\n    border-color: #949494;\r\n    border-width: 1px;\r\n`\r\n\r\nconst StyledElement = styled.View`\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: baseline;\r\n    justify-content: space-around;\r\n    margin: 0.2rem;\r\n`\r\n\r\nconst StyledElementLeft = styled.View`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n`\r\n\r\nconst StyledElementRight = styled.View`\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: flex-end;\r\n`\r\n\r\nexport default function ToDoList() {\r\n    const history = useHistory();\r\n    const {tasks, setTasks, setMessage} = useContext(ToDoContext);\r\n\r\n    function handleDelete(id: number) {\r\n        deleteToDo(id);\r\n        setTasks(tasks.filter(t => t.Id !== id));\r\n        setMessage({\r\n                success: true,\r\n                header: 'Success',\r\n                content: 'Task successsfully deleted'\r\n            });\r\n    }\r\n\r\n    function toggleActive(id: number) {\r\n        const task = getToDo(id);\r\n        if (task) {\r\n            task.Edited = new Date();\r\n            task.Active = !task.Active;\r\n            postToDo(task);\r\n            setMessage({\r\n                success: true,\r\n                header: 'Success',\r\n                content: 'Task successsfully edited'\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header> List of tasks</Header>\r\n            {tasks.length > 0 && tasks.map( task => (\r\n                <StyledSegment key={task.Id}>\r\n                    <StyledHeader>{task.Content}</StyledHeader>\r\n                    <StyledElement>\r\n                        <StyledElementLeft>\r\n                            <StyledButton onPress={() => toggleActive(task.Id)} color={task.Active ? 'orange' : 'teal'} title={task.Active ? 'Active' : 'Already done'}/>\r\n                            {task.Created < task.Edited ?\r\n                            <StyledText>Edited: {task.Edited.toLocaleDateString()} at {task.Edited.toLocaleTimeString()}</StyledText>\r\n                            : <StyledText>Created: {task.Created.toLocaleDateString()} at {task.Created.toLocaleTimeString()}</StyledText>}\r\n                        </StyledElementLeft>\r\n                        <StyledElementRight>\r\n                            <StyledButton color='forestgreen' title='Edit' onPress={() => {history.push(`/edittodo/${task.Id}`)}}/>\r\n                            <StyledButton color='tomato' onPress={()=>handleDelete(task.Id) } title='Delete'/>\r\n                        </StyledElementRight>\r\n                    </StyledElement>\r\n                </StyledSegment>\r\n            ))}\r\n            <StyledDivider/>\r\n                <StyledHeader>\r\n                    New Task\r\n                </StyledHeader>\r\n            <StyledElement>\r\n                <StyledButton color=\"seagreen\" title='Create Task' onPress={() => {history.push('/newtodo')}}/>\r\n            </StyledElement>\r\n            \r\n        </>\r\n    )\r\n}","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router\";\r\nimport styled from \"styled-components/native\";\r\nimport { getTime, getToDo, postToDo } from \"../api/api\";\r\nimport { DateTimeDto } from \"../models/DateTimeDto\";\r\nimport { ToDoElement } from \"../models/ToDoElement\";\r\nimport { StyledButton } from \"./Button\";\r\nimport { Header } from \"./Header\";\r\nimport { StyledSegment } from \"./Segment\";\r\nimport { ToDoContext } from \"./ToDoProvider\";\r\n\r\nconst StyledLabel = styled.Text`\r\n    text-align: left;\r\n    font-size: 1.2rem;\r\n`\r\nconst StyledElement = styled.View`\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: baseline;\r\n    justify-content: center;\r\n    margin: 0.5rem;\r\n`\r\nconst StyledElementLeft = styled.View`\r\n    margin: 0.5rem;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: stretch;\r\n`\r\nconst StyledInput = styled.TextInput`\r\n    box-sizing: border-box;\r\n    font-size: 1rem;\r\n    background-color: white;\r\n    height: 2rem;\r\n    padding: 0.5rem;\r\n    margin: 0.5rem 0;\r\n`\r\nexport default function ToDoForm() {\r\n    const {tasks, message, setMessage} = useContext(ToDoContext);\r\n    const history = useHistory();\r\n    const {id} = useParams<{id: string}>();\r\n    const [task, setTask] = useState<ToDoElement>({\r\n        Id: 0,\r\n        Content: '',\r\n        Active: true,\r\n        Created: new Date(),\r\n        Edited: new Date()\r\n    })\r\n\r\n    useEffect(() => {\r\n        if(id) {\r\n            const todo = getToDo(Number(id));\r\n            if (todo) {\r\n                setTask(todo);\r\n            }\r\n        };\r\n    }, [id])\r\n\r\n    useEffect(() => {\r\n        if (message !== null) {\r\n            setMessage(null);\r\n        }\r\n    }, [])\r\n\r\n    function handleSubmit() {\r\n        if (validateContext()){\r\n            \r\n                getTime<DateTimeDto>().then(\r\n                    response => {\r\n                        if (task.Id !== 0) {\r\n                            task.Edited = new Date(response.dateTime);\r\n                        } else {\r\n                            task.Created = new Date(response.dateTime);\r\n                        }\r\n                    }\r\n                ).catch((error) => {\r\n                    console.error(error);\r\n                    setMessage({\r\n                        success: false,\r\n                        header: 'Error',\r\n                        content: 'Error in getting current time'\r\n                    });\r\n                });\r\n                \r\n            \r\n            postToDo(task);\r\n            setMessage({\r\n                success: true,\r\n                header: 'Success',\r\n                content: 'Task successsfully added'\r\n            });\r\n            history.push('/');\r\n        }\r\n    }\r\n\r\n    function handleInputChange(value: string){\r\n        setTask({...task, \"Content\": value});\r\n        if (message !== null) {\r\n            setMessage(null);\r\n        }\r\n    }\r\n\r\n    function toggleActive() {\r\n        setTask({...task, Active: !task.Active});\r\n        if (message !== null) {\r\n            setMessage(null);\r\n        }\r\n    }\r\n\r\n    function closeForm() {\r\n        history.push('/');\r\n        if (message !== null) {\r\n            setMessage(null);\r\n        }\r\n    }\r\n\r\n    function validateContext() {\r\n        if (task.Content.trim() === '') {\r\n            setMessage({\r\n                success: false,\r\n                header: 'Empty Task',\r\n                content: 'Task is empty, please fill task description'\r\n            });\r\n            return false;\r\n        } else if (tasks.some(t => t.Content === task.Content)) {\r\n            setMessage({\r\n                success: false,\r\n                header: 'Task duplication',\r\n                content: 'Such task already exist, please submit another task'\r\n            });\r\n            return false;\r\n        };\r\n        return true;\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <Header >{id?'Edit':'New'} task</Header>\r\n            <StyledSegment>\r\n                <StyledElementLeft>\r\n                <StyledLabel>Task description</StyledLabel>\r\n                <StyledInput  \r\n                    placeholder='Write the task here' \r\n                    value={task.Content || ''} \r\n                    nativeID='Content' \r\n                    onChangeText={(value) => handleInputChange(value)}/>\r\n                {/* <CheckBox \r\n                    label='Active' \r\n                    checked={task.Active || false} \r\n                    name='Active' \r\n                    onChange={toggleActive}/> */}\r\n                </StyledElementLeft>\r\n                <StyledElement>\r\n                    <StyledButton color=\"green\" onPress={handleSubmit} title='Submit'/>\r\n                    <StyledButton color=\"lightslategrey\" onPress={closeForm} title='Cancel'/>\r\n                </StyledElement>\r\n            </StyledSegment>\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport styled from \"styled-components/native\";\r\nimport { Pressable } from \"react-native\";\r\n\r\nconst StyledMenu = styled.View`\r\n  height: 3rem;\r\n  width: 100%;\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  padding: 0 2rem;\r\n  position: fixed;\r\n  top: 0;\r\n  border-style: solid;\r\n  border-bottom-color: red;\r\n  border-bottom-width: 1px;\r\n`\r\n\r\nconst StyledLink = styled.Pressable`\r\n  font-family: 'Lato';\r\n  text-decoration: none;\r\n  margin-top: 1rem;\r\n`\r\n\r\nexport default function Menu() {\r\n  const history = useHistory();\r\n\r\n  return (\r\n      <div>\r\n        <StyledMenu>\r\n          <Pressable onPress={() => history.push(\"/\")} >\r\n            <StyledLink>Home</StyledLink>\r\n          </Pressable>\r\n        </StyledMenu>\r\n      </div>\r\n    )\r\n}","import React from \"react\";\r\nimport styled from \"styled-components/native\";\r\nimport { Header } from \"./Header\";\r\nimport { StyledSegment } from \"./Segment\";\r\n\r\ninterface Props {\r\n    error: boolean;\r\n    success: boolean;\r\n    header: string;\r\n    content: string;\r\n}\r\n\r\nconst ErrorContent = styled.Text`\r\n    color: 'red';\r\n`\r\n\r\nconst SuccessContent = styled.Text`\r\n    color: 'green';\r\n`\r\n\r\nexport default function Message({error, success, header, content}: Props){\r\n    return(\r\n        <StyledSegment>\r\n            <Header>{header}</Header>\r\n            {success ?\r\n            <SuccessContent>{content}</SuccessContent>:\r\n            <ErrorContent>{content}</ErrorContent>}\r\n        </StyledSegment>\r\n    );\r\n}","import React, { useContext } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport ToDoList from './components/ToDoList';\nimport ToDoForm from './components/ToDoForm';\nimport ToDoProvider, { ToDoContext } from './components/ToDoProvider';\nimport styled from 'styled-components/native';\nimport Menu from './components/Menu';\nimport Message from './components/Message';\nimport { StyledSegment } from './components/Segment';\n\nconst StyledContainer = styled.View`\n  margin-top: 3em;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n`\nconst StyledContent = styled.View`\n  width: 100%;\n  max-width: 800px;\n`\n\nfunction App() {\nconst {message} = useContext(ToDoContext);\n\n  return (\n    <ToDoProvider>\n      <BrowserRouter basename=\"/ToDoList\" >\n        <div className=\"App\">\n          <Menu/>\n            <StyledContainer>\n              <StyledContent>\n              <Switch>\n                <Route path='/' exact component={ToDoList}/>\n                <Route path={['/newtodo','/edittodo/:id']} \n                  component={ToDoForm}/>\n              </Switch>\n                {message && \n                <Message\n                        error={!message.success}\n                        success={message.success}\n                        header={message.header}\n                        content={message.content}\n                    />\n              }  \n              </StyledContent>\n            </StyledContainer>\n        </div>\n      </BrowserRouter>\n    </ToDoProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { AppRegistry } from \"react-native\";\n\nAppRegistry.registerComponent(\"App\", () => App);\n\nAppRegistry.runApplication(\"App\", {\n  rootTag: document.getElementById(\"root\")\n});\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}